ImageRuntimeVersion: v4.0.30319
Assembly MazeChallengeMngd, Version=0.0.*, Culture=Invariant Language (Invariant Country): 
	hash=SHA1, flags=PublicKey
Assembly mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089: 
	hash=None, flags=None
Assembly System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089: 
	hash=None, flags=None
Class MazeChallengeAdapterNS.MazeUtils: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
Class MazeChallengeAdapterNS.Cell: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
    Void .ctor(Int32, Int32): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    Int32 Col  'get set' : 
    Int32 Row  'get set' : 
  Methods:
    get_Row(): PrivateScope, Public, HideBySig, SpecialName
    set_Row(Int32): PrivateScope, Public, HideBySig, SpecialName
    get_Col(): PrivateScope, Public, HideBySig, SpecialName
    set_Col(Int32): PrivateScope, Public, HideBySig, SpecialName
Class MazeChallengeAdapterNS.Path: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Fields:
    System.Collections.Generic.List`1[MazeChallengeAdapterNS.Cell] m_SolutionPath : Public
Class MazeChallengeAdapterNS.Paths: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Fields:
    System.Collections.Generic.List`1[MazeChallengeAdapterNS.Path] m_SolutionPath : Public
Class MazeChallengeAdapterNS.MazeSolverMngdAdapter: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Fields:
    Int32 m_Rows : Public
    Int32 m_Cols : Public
    System.Collections.Generic.List`1[System.Collections.Generic.List`1[System.Int32]] m_MazeMatrix : Public
  Properties:
    Boolean ContainsCycles 'get ' : 
  Methods:
    CreateGraph(String): PrivateScope, Public, HideBySig
    FindPathUsingDFS(Int32, Int32): PrivateScope, Public, HideBySig
    FindPathUsingNonGreedyASTAR(Int32, Int32, Int32, Int32): PrivateScope, Public, HideBySig
    get_ContainsCycles(): PrivateScope, Public, HideBySig, SpecialName
